# -*- coding: utf-8 -*-
"""Labs1_Regression_Student.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15PUOi2c44MB8bhj3d7Ez9thahW83rTHK
"""

import numpy as np
import matplotlib.pyplot as plt

# Load dataset
x_train, x_test, y_train, y_test = np.load('regression_data.npy', allow_pickle=True)

# Reshape targets
y_train = y_train.reshape(-1,)
y_test = y_test.reshape(-1,)

# Add bias term (column of ones)
train_data = np.hstack((x_train, np.ones((x_train.shape[0], 1))))
test_data = np.hstack((x_test, np.ones((x_test.shape[0], 1))))

# ==============================
# Task 1: Standard Linear Regression (Gradient Descent)
# ==============================
def linear_regression_train(x_train, y_train, lr=1e-3, iterations=7000):
    weight = np.random.randn(2)
    loss = np.zeros(iterations)

    for i in range(iterations):
        y_pred = None  # Compute predicted values

        loss[i] = None  # Compute MSE

        # Compute gradients
        m_gradient = None  # Compute gradient for weight
        b_gradient = None  # Compute gradient for bias

        # Update weights
        weight[0] -= None  # Apply gradient descent for weight
        weight[1] -= None  # Apply gradient descent for bias

    return weight, loss

weight_standard, loss_standard = linear_regression_train(train_data, y_train)

print("\n=== Standard Linear Regression Parameters ===")
print(f'Weight (m): {None}')  # Print weight[0]
print(f'Bias (b): {None}')  # Print weight[1]

# ==============================
# Task 2: Compute MSE
# ==============================
def compute_mse(y_true, y_pred):
    return None  # Compute MSE formula

y_pred_standard = None  # Compute predictions for test data
mse_standard = compute_mse(y_test, y_pred_standard)

print("\n=== Mean Squared Error (Standard Regression) ===")
print(f'MSE: {None}')

# ==============================
# Task 3: Ridge Regression (Gradient Descent)
# ==============================
def ridge_regression_train(x_train, y_train, lr=1e-3, iterations=7000, lambda_reg=0.1):
    weight = np.random.randn(2)
    loss = np.zeros(iterations)

    for i in range(iterations):
        y_pred = None  # Compute predicted values

        loss[i] = None  # Compute MSE with regularization term

        # Compute gradients with regularization
        m_gradient = None  # Compute weight gradient with regularization
        b_gradient = None  # Compute bias gradient

        # Update weights
        weight[0] -= None  # Apply gradient descent for weight
        weight[1] -= None  # Apply gradient descent for bias

    return weight, loss

weight_ridge, loss_ridge = ridge_regression_train(train_data, y_train)

print("\n=== Ridge Regression Parameters ===")
print(f'Weight (m): {None}')
print(f'Bias (b): {None}')

y_pred_ridge = None  # Compute predictions for test data
mse_ridge = compute_mse(y_test, y_pred_ridge)

print("\n=== Mean Squared Error (Ridge Regression) ===")
print(f'MSE: {None}')

# ==============================
# Task 4: Plot Loss Curve
# ==============================

# ==============================
# Task 5: Closed-form Ridge Regression
# ==============================
def closed_form_ridge(x_train, y_train, lambda_reg=0.1):
    I = np.eye(x_train.shape[1])
    w_closed_form = None  # Compute closed-form solution (Equation 4.27)
    return w_closed_form

weight_closed_form = closed_form_ridge(train_data, y_train)
y_pred_closed_form = None  # Compute predictions for test data
mse_closed_form = compute_mse(y_test, y_pred_closed_form)

print("\n=== Closed-form Ridge Regression Parameters ===")
print(f'Weight (m): {None}')
print(f'Bias (b): {None}')
print("\n=== Mean Squared Error (Closed-form Ridge Regression) ===")
print(f'MSE: {None}')

# ==============================
# Task 6: Predictive Distribution
# ==============================
predictive_mean = None  # Compute predictive mean
predictive_variance = None  # Compute predictive variance

print("\n=== Predictive Distribution ===")
print(f'Predictive Mean (first 5 values): {None}')
print(f'Predictive Variance: {None}')


# ==============================
# Task 7: Plot Predictions
# ==============================


# ==============================
# Plot Confidence Intervals
# ==============================
